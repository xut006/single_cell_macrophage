knitr::opts_knit$set(global.par = TRUE)
#### load packages ####
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(grid)
library(gridExtra)
#### set repository directory ####
## set baseDir if Knitting with RStudio button
baseDir <- "/Users/xuqiantan/Desktop/Su Lab/single_cell_macrophage/"
## sets path if run from runAnalysis.R
#currentFile <- rstudioapi::getActiveDocumentContext()$path
#baseDir <- gsub("single_cell_macrophage/.*", "single_cell_macrophage/", currentFile)
#### source function scripts ####
funcDir <- paste(baseDir, "src/functions/", sep="")
funcFiles <- c("loadData.R",
"cleanCt.R",
"clusterFilter.R",
"violinPlot.R")
funcFiles <- paste(funcDir, funcFiles, sep="")
for(file in funcFiles){
source(file)
}
## load data
ctTable <- loadData()
View(ctTable)
nrow(ctTable)
ncol(ctTable)
## norm all data
ctNorm <- cleanCt(ctTable,
summaryOutput=T,
cumExpCutoff=F,
cumHist=F,
normGene="none")
View(ctNorm)
knitr::opts_chunk$set(echo = TRUE)
#### load packages ####
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(grid)
library(gridExtra)
#### set repository directory ####
## set baseDir if Knitting with RStudio button
baseDir <- "/Users/xuqiantan/Desktop/Su Lab/single_cell_macrophage/"
## sets path if run from runAnalysis.R
#currentFile <- rstudioapi::getActiveDocumentContext()$path
#baseDir <- gsub("single_cell_macrophage/.*", "single_cell_macrophage/", currentFile)
#### source function scripts ####
funcDir <- paste(baseDir, "src/functions/", sep="")
funcFiles <- c("loadData.R",
"cleanCt.R",
"clusterFilter.R",
"violinPlot.R")
funcFiles <- paste(funcDir, funcFiles, sep="")
for(file in funcFiles){
source(file)
}
## load data
ctTable <- loadData()
## norm all data
ctNorm <- cleanCt(ctTable,
summaryOutput=T,
cumExpCutoff=F,
cumHist=F,
normGene="none")
#### set repository directory ####
## set baseDir if Knitting with RStudio button
baseDir <- "/Users/xuqiantan/Desktop/Su Lab/single_cell_macrophage/"
## sets path if run from runAnalysis.R
#currentFile <- rstudioapi::getActiveDocumentContext()$path
#baseDir <- gsub("single_cell_macrophage/.*", "single_cell_macrophage/", currentFile)
#### source function scripts ####
funcDir <- paste(baseDir, "src/functions/", sep="")
funcFiles <- c("loadData.R",
"cleanCt.R",
"clusterFilter.R",
"violinPlot.R")
funcFiles <- paste(funcDir, funcFiles, sep="")
for(file in funcFiles){
source(file)
}
## load data
ctTable <- loadData()
## norm all data
ctNorm <- cleanCt(ctTable,
summaryOutput=T,
cumExpCutoff=F,
cumHist=F,
normGene="none")
ctsub <- subset(ctNorm, select=-c(mouse, plateID))
ctsub
View(ctsub)
ctInvert <- data.frame(t(ctsub[-1]))
colnames(ctInvert) <- ctsub[, 1]
View(ctInvert)
#### load packages ####
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(grid)
library(gridExtra)
library(Rtsne)
set.seed(1)
tsne <- Rtsne(ctInvert[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
set.seed(1)
tsne <- Rtsne(ctInvert[,-1])
set.seed(1)
tsne <- Rtsne(ctInvert[,-1], perplexity=10)
ctInvert[,-1]
set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
colors = rainbow(length(unique(train$label)))
set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, t='n', main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2", "cex.main"=2, "cex.lab"=1.5)
#text(tsne$Y, labels=train$label, col=colors[train$label])
View(tsne)
# visualizing
plot(tsne$Y, t='n', main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2", "cex.main"=2, "cex.lab"=1.5)
tsne$Y
# visualizing
plot(tsne$Y)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
#set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
#set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
#set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
#set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
#set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
set.seed(5)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
set.seed(2)
tsne <- Rtsne(ctInvert, perplexity=10)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
set.seed(2)
tsne <- Rtsne(ctInvert, perplexity=20)
set.seed(2)
tsne <- Rtsne(ctInvert, perplexity=15)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=15)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
View(tsne)
set.seed(1)
tsne <- Rtsne(ctInvert, perplexity=15)
# visualizing
plot(tsne$Y, main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2", asp = 1, pch = 20, col = "blue")
View(ctInvert)
library(Seurat)
ctdata <- CreateSeuratObject(counts = ctInvert)
ctdata
ctdata <- FindVariableFeatures(ctdata)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(ctdata), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(ctdata)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
pbmc <- ScaleData(pbmc)
ctdata <- ScaleData(ctdata)
ctdata <- RunPCA(ctdata, verbose = FALSE)
VizDimLoadings(ctdata, dims = 1:2, reduction = "pca")
DimPlot(ctdata)
ctdata <- JackStraw(object = ctdata,num.replicate = 100, dim = 50)
ctdata <- JackStraw(object = ctdata,num.replicate = 100)
ctdata <- JackStraw(object = ctdata,num.replicate = 100)
pbmc <- ScoreJackStraw(ctdata)
JackStrawPlot(object = ctdata)
ctdata <- JackStraw(object = ctdata,num.replicate = 100, dim = 20)
pbmc <- ScoreJackStraw(ctdata, dim = 1:20)
JackStrawPlot(object = ctdata, dims = 1:20)
ctdata <- JackStraw(object = ctdata,num.replicate = 100, dim = 20)
ctdata <- ScoreJackStraw(ctdata, dim = 1:20)
JackStrawPlot(object = ctdata, dims = 1:20)
ElbowPlot(ctdata, ndims = 20)
ctdata <- FindNeighbors(ctdata, dims = 1:20)
ctdata <- FindClusters(ctdata, resolution = 0.5)
ctdata <- RunTSNE(ctdata, dims = 1:2, reduction.name = "pca")
DimPlot(ctdata, label = TRUE)
markers = FindAllMarkers(ctdata)
View(markers)
View(ctInvert)
install.packages("MineICA")
